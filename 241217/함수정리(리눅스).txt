(공용)

#include <sys/socket.h>
int socket(int domain, int type, int protocol);
socket 함수 : 소켓을 생성하는 함수
domain : 소켓이 사용할 프로토콜 체계 정보 전달
type : 데이터 전송 소켓의 타입
protocol : 0으로 넣어줘도 상관없으나,
           하나의 프로토콜 체계 안에 데이터의 전송 방식이 동일한 프로토콜이 둘 이상 존재하는 경우
           이 파라미터를 통하여 원하는 프로토콜의 정보를 조금더 구체화 해야함
return : 성공 시 해당 소켓의 파일 디스크립터, 실패 시 -1을 반환

※ 프로토콜 체계
PF_INET : IPv4 인터넷 프로토콜 체계
PF_INET6 : IPv6 인터넷 프로토콜 체계
PF_LOCAL : 로컬 통신을 위한 UNIX 프로토콜 체계
PF_PACKET : Low Level 소켓을 위한 프로토콜 체계
PF_IPX : IPX 노벨 프로토콜 체계

※ 인터넷 주소 체계
IPv4 : Internet Protocol version 4 → 4바이트 주소체계
IPv6 : Internet Protocol version 6 → 16바이트 주소체계

※ IPv4 주소체계
class A : 1 byte → 네트워크 ID / 3 byte → 호스트 ID
class B : 2 byte → 네트워크 ID / 2 byte → 호스트 ID
class C : 3 byte → 네트워크 ID / 1 byte → 호스트 ID
class D : 4 byte → 멀티캐스트 IP주소

※ 소켓의 타입
연결지향형 소켓(SOCK_STREAM) : 신뢰성 있는 순차적인 바이트 기반의 연결지향 데이터 전송방식의 소켓
 - 중간에 데이터가 소멸되지 않고 목적지로 전송
 - 전송 순서대로 데이터가 수신
 - 전송되는 데이터의 경계가 존재하지 않음
 - 소켓 대 소켓의 연결은 반드시 1:1

비 연결지향형 소켓(SOCK_DGRAM) : 신뢰성과 순차적 데이터 전송을 보장하지 않는, 고속의 데이터 전송을 목적으로 하는 소켓
 - 전송된 순서에 상관없이 가장 빠른 전송을 지향
 - 전송된 데이터는 손실의 우려가 있고, 파손의 우려가 있음
 - 전송되는 데이터의 경계(Boundary)가 존재함
 - 한 번에 전송할 수 있는 데이터의 크기가 제한되어 있음

※ 파일 디스크립터 : 시스템으로부터 할당 받은 파일 또는 소켓에 부여되는 정수
0 : 표준 입력 (Standard Input)
1 : 표준 출력 (Standard Output)
2 : 표준 에러 (Standard Error)

(서버)

#include <sys/socket.h>
int bind(int sockfd, sockaddr *addr, socklen_t addrlen);
bind 함수 : 소켓에 인터넷 주소를 할당해주는 함수 → serv_sock에 serv_addr 주소 정보를 할당해 줌
sockfd : 주소 정보를 할당할 소켓의 파일 디스크립터
addr : 할당하고자 하는 주소 정보를 지니는 구조체 변수의 주소 값
addrlen : 두번째 파라미터로 전달된 구조체 변수의 길이정보
return : 성공 시 0, 실패 시 -1을 반환
※ 클라이언트는 bind 안시키는 이유?
  → accpet 함수에서 자동으로 연결 요청한 클라이언트의 주소 정보를 담기때문에 따로 해주지 않아도 됨

※ sockaddr에 주소정보를 전달 할 sockaddr_in구조체
struct sockaddr_id{
    sa_family_t     sin_family;     // 주소체계(Address Family)
    uint16_t        sin_port;       // 16비트 TCP/UDP PORT 번호
    in_addr  sin_addr;       // 32비트 IP주소
    char            sin_zero[8];    // 사용되지 않음
}

struct in_addr {
    in_addr_t       s_addr;         // 32비트 IPv4 인터넷 주소
}

※ sockaddr_in의 멤버에 대한 분석
sin_family : 주소체계 정보
 - AF_INET : IPv4 인터넷 프로토콜에 적용하는 주소체계
 - AF_INET6 : IPv6 인터넷 프로토콜에 적용하는 주소체계
 - AF_LOCAL : 로컬 통신을 위한 유닉스 프로토콜의 주소체계
sin_port : 16비트의 네트워크 바이트 순서로 저장된 PORT번호
sin_addr : 32비트의 네트워크 바이트 순서로 저장된 IP 주소정보
sin_zero
 - 특별한 의미는 없음 그러나 반드시 0으로 채워줘야 함
 - sockaddr_in의 크기를 sockaddr와 일치시키기 위해 삽입된 멤버

※ 바이트 순서
 - 빅 엔디안(Big Endian) : 상위 바이트의 값을 작은 번지수에 저장하는 방식 → 12/34/56/78
 - 리틀 엔디안(Little Endian) : 상위 바이트의 값을 큰 번지수에 저장하는 방식 → 78/56/34/12
  → 네트워크 바이트 순서 : 빅 엔디안 방식으로 통일

※ 바이트 순서의 변환(Endian Conversions)
 - unsigned short htons(unsigned short);
   → short형 데이터를 호스트 바이트 순서에서 네트워크 바이트 순서로 변환
 - unsigned short ntohs(unsigned short);
   → short형 데이터를 네트워크 바이트 순서에서 호스트 바이트 순서로 변환
 - unsigned long htonl(unsigned long);
   → long형 데이터를 호스트 바이트 순서에서 네트워크 바이트 순서로 변환
 - unsigned long ntohl(unsigned long);
   → long형 데이터를 네트워크 바이트 순서에서 호스트 바이트 순서로 변환

#include <sys/socket.h>
int listen(int sockfd, int backlog);
listen 함수 : 연결 요청 대기 상태로 진입 시켜주는 함수
sockfd : 연결 요청 대기 상태로 진입시킬 대상 소켓의 파일 디스크립터(서버 소켓의 파일 디스크립터)
backlog : 연결 요청 대기 큐의 크기 정보(backlog가 5면 큐의 크기가 5가 되며 클라이언트의 연결 요청을 5개까지 대기 시킬 수 있음)
return : 성공 시 0, 실패 시 -1을 반환

#include <sys/socket.h>
int accept(int sockfd, sockaddr *addr, socklen_t *addrlen);
accpet 함수 : 대기 중인 클라이언트의 연결 요청을 수락하는 함수
sockfd : 서버 소켓의 파일 디스크립터
addr : 연결요청 한 클라이언트의 주소 정보를 담을 변수의 주소값 전달
       함수 호출이 완료되면 인자로 전달된 주소의 변수에 클라이언트 주소 정보가 채워짐
addrlen : 두번째 파라미터의 변수 크기를 바이트 단위로 전달
          함수 호출이 완료되면 두번째 파라미터 변수의 크기 정보로 채워져 있던 변수에 클라이언트의 주소 정보 길이가 바이트 단위로 계산되어 채워짐
return : 성공 시 데이터 입출력에 이용하기 위해 생성된 소켓의 파일 디스크립터, 실패 시 -1을 반환

(클라이언트)

#include <sys/socket.h>
int connect(int sockfd, sockaddr *serv_addr, socklen_t addrlen);
connect 함수 : 클라이언트의 연결요청 기능을 하는 함수
sockfd : 클라이언트 소켓의 파일 디스크립터
serv_addr : 연결요청 할 서버의 주소정보를 담은 변수의 주소값 전달
addrlen : 두번째 파라미터 serv_addr의 변수 크기를 바이트 단위로 전달
return : 성공 시 0, 실패 시 -1을 반환

(파일)

#include <fcntl.h>
int open(const char *path, int flag);
open 함수 : 파일을 열어주는 함수
path : 파일의 이름을 나타내는 문자열의 주소
flag : 파일의 오픈모드
return : 성공 시 파일 디스크립터, 실패 시 -1을 반환

※ flag에 사용할 수 있는 오픈모드
O_CREATE : 필요하면 파일을 생성
O_TRUNC : 기존 데이터 전부 삭제
O_APPEND : 기존 데이터 보존하고, 뒤에 이어서 저장
O_RDONLY : 읽기 전용으로 파일 오픈
O_WRONLY : 쓰기 전용으로 파일 오픈
O_RDWR : 읽기, 쓰기 겸용으로 파일 오픈

(파일과 소켓 공용 함수)

#include <unistd.h>
int close(int fd);
close 함수 : 파일 또는 소켓을 닫는 함수
fd : 닫을 파일 또는 소켓의 파일 디스크립터
return : 성공 시 0, 실패 시 -1을 반환

#include <unistd.h>
ssize_t write(int fd, const void *buf, size_t nbytes);
write 함수 : 파일 또는 소켓에 데이터를 출력(전송)하는 함수
fd : 데이터 전송 대상을 가리키는 파일 디스크립터
buf : 전송할 데이터가 저장된 버퍼의 주소
nbytes : 전송할 데이터의 바이트 수
return : 성공 시 전달한 바이트 수, 실패 시 -1 반환

#include <unistd.h>
ssize_t read(int fd, void *buf, size_t nbytes);
read 함수 : 데이터를 입력(수신)하는 함수
sock : 데이터 수신 대상을 나타내는 파일 디스크립터
message : 수신할 데이터를 저장할 버퍼의 주소
sizeof(message) - 1 : 수신할 최대 바이트 수(문자열의 끝을 의미하는 \0을 마지막에 붙여 주어야 하므로 1바이트 줄임)
return : 성공 시 수신한 바이트 수(단 파일의 끝을 만나면 0), 실패 시 -1을 반환

(인터넷 주소와 관련된 함수)

#include <arpa/inet.h>
in_addr_t inet_addr(const char *string);
inet_addr 함수 : 점이 찍힌 십진수 방식의 IPv4주소를 정수값으로 변환시켜 주는 함수
string : 점이 찍힌 십진수 방식의 IPv4주소
return : 성공 시 빅 엔디안으로 변환된 32비트 정수 값, 실패 시 INADDR_NONE 반환

#include <arpa/inet.h>
int inet_aton(const char *string, in_addr *addr);
inet_aton 함수 : 기능 상 inet_addr 함수와 같으나 별도의 대입과정 필요없이 자동으로 전달받은 구조체에 값 저장, 반환 값이 T/F로 나옴
string : 변환할 점이 찍힌 십진수 방식의 IPv4주소
addr : 변환된 값이 저장될 in_addr 구조체 변수의 주소
return : 성공 시 1(true), 실패 시 0(false) 반환

#include <arpa/inet.h>
char * inet_ntoa(in_addr adr);
inet_ntoa 함수 : 네트워크 바이트 순서로 정렬된 정수형 IP 주소 정보를 점이 찍힌 십진수 방식의 주소 값으로 변환
adr : 정수형 IP 주소값이 들어있는 구조체 in_addr
return : 성공 시 변환된 문자열 형식의 주소 값, 실패 시 -1 반환
※ 반환 형이 char 포인터 형인데 별도의 메모리공간을 할당해서 저장한 것이 아님. 반환 후 함수를 재호출하면 손실이 일어날 수 있으므로 별도의 복사 과정을 통해 저장해 두는 것이 안전

#include <cstring>
void * memset(void *data, int num, size_t datasize);
memset 함수 : 동일한 값으로 바이트단위 초기화를 하는 함수
data : 초기화의 대상
num : 초기화 할 값
datasize : 초기화 할 바이트단위의 크기
 → memset(&addr, 0, sizeof(addr)); : addr을 0으로 전부 초기화 라는 의미

