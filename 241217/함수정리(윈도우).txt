※ 윈도우에서 소켓을 사용하기 위해 윈도우소켓(윈속)을 사용해야함
   이를 위해 아래 두가지를 진행해 주어야 함
   - 헤더파일 winsock2.h 포함
   - ws2_32.lib 라이브러리 링크

#include <winsock2.h>
int WSAStartup(WORD wVersionRequested, LPWSADATA lpWSAData);
WSAStartup 함수 : 윈속 프로그래밍 전 프로그램에서 요구하는 윈도우 소켓의 버전을 알리고, 해당 버전을 지원하는 라이브러리의 초기화 작업을 해주는 함수
wVersionRequested : 프로그래머가 사용할 윈속의 버전정보
                    사용할 소켓의 버전이 1.2 라면 주 버전은 1, 부 버전은 2가 됨
                    상위 8비트 : 부 버전의 정보 / 하위 8비트 : 주 버전의 정보
                    0x0201과 같이 보내주어야 함
                    MAKEWORD 함수 제공 (MAKEWORD(1, 2) → 0x0201 반환)
lpWSAData : WSADATA라는 구조체 변수의 주소(LPWSADATA는 WSADATA의 포인터형)
            함수 호출 완료 시 해당 변수에는 초기화 된 라이브러리 정보가 채워짐

#include <winsock2.h>
int WSACleanup(void);
WSACleanup 함수 : 윈속 라이브러리의 해제

#include <winsock2.h>
SOCKET socket(int af, int type, int protocol);
return : 성공 시 소켓 핸들, 실패 시 INVALID_SOCKET 반환

#include <winsock2.h>
int bind(SOCKET s, const sockaddr *name, int namelen);
return : 성공 시 0, 실패 시 SOCKET_ERROR 반환

#include <winsock2.h>
int listen(SOCKET s, int backlog);
return : 성공 시 0, 실패 시 SOCKET_ERROR 반환

#include <winsock2.h>
SOCKET accpet(SOCKET s, sockaddr *addr, int *addrlen);
return : 성공 시 소켓 핸들, 실패 시 INVALID_SOCKET 반환

#include <winsock2.h>
int connect(SOCKET s, const sockaddr *name, int namelen);
return : 성공 시 0, 실패 시 SOCKET_ERROR 반환

#include <winsock2.h>
int closesocket(SOCKET s); //리눅스의 close 함수의 소켓 닫기 기능과 같음
return : 성공 시 0, 실패 시 SOCKET_ERROR 반환

#include <winsock2.h>
int send(SOCKET s, const char *buf, int len, int flags);
send 함수 : 소켓을 통한 데이터 전송 기능 함수
s : 데이터 전송 대상과의 연결을 의미하는 소켓의 핸들 값
buf : 전송할 데이터를 저장하고 있는 버퍼의 주소
len : 전송할 데이터의 바이트 수
flags : 데이터 전송 시 적용할 다양한 옵션 정보
return : 성공 시 전송된 바이트 수, 실패 시 SOCKET_ERROR 반환

#include <winsock2.h>
int recv(SOCKET s, const char *buf, int len, int flags);
s : 데이터 수신 대상과의 연결을 의미하는 소켓의 핸들 값
buf : 수신된 데이터를 저장하고 있는 버퍼의 주소
len : 수신할 수 있는 데이터의 최대 바이트 수
flags : 데이터 수신 시 적용할 다양한 옵션 정보